esphome:
  name: rack-controller
  friendly_name: rack-controller


esp32:
  board: esp32dev
  framework:
    type: arduino

ota:
  safe_mode: true
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret domain_devices

  ap:
    ssid: "Rack-Controller Fallback Hotspot"
    password: !secret wifi_fallback_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret home_assistant_api_key

# OLED display
i2c:
  sda: GPIO19
  scl: GPIO18
  frequency: 800kHz

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto
    size: 24
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto_small
    size: 12
  - file:
      type: gfonts
      family: Roboto
      weight: 900
    id: roboto_medium
    size: 22

  - file: 'gfonts://Material+Symbols+Outlined'
    id: icon_font_30
    size: 30
    glyphs: [
      "\U0000F077", # thermostat-auto
      "\U0000F168", # mode-fan
    ]

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      if (id(thermostat).mode != CLIMATE_MODE_OFF) {
        it.print(20, 0, id(icon_font_30), "\U0000F077");
      } else {
        it.print(20, 0, id(icon_font_30), "\U0000F168");
      }
      it.printf(64, 0, id(roboto), "%3.1f", id(temperature).state);
      it.print(114, 5, id(roboto_small), "°C");

      //it.printf(0, 0, id(roboto), "%3.1f", id(temperature).state);
      //it.print(50, 0, id(roboto_small), "°C");
      //it.printf(68, 0, id(roboto), "%3.1f", id(humidity).state);
      //it.print(118, 0, id(roboto_small), "%");

      it.printf(it.get_width(), 33, id(roboto_medium), TextAlign::TOP_RIGHT, "%.0f RPM", id(fan_speed).state);

sensor:
  - platform: pulse_counter
    pin:
      number: GPIO17
      mode:
        input: true
        pullup: true
    unit_of_measurement: 'RPM'
    id: fan_speed
    name: Fan Speed
    accuracy_decimals: 0
    update_interval: 15s
    # NF-S12A max (to calibrate): 1200 RPM
    filters:
      - multiply: 0.5

  # AM2302 - DHT22 sensor
  - platform: dht
    pin: GPIO25
    # minimum update interval: https://www.adafruit.com/product/393
    update_interval: 2s
    humidity:
      name: "Rack Humidity"
      id: humidity
    temperature:
      name: "Rack Temperature"
      id: temperature

output:
  - platform: ledc
    pin: GPIO16
    # target 25kHz in noctua specs
    frequency: 25kHz
    # NF-S12A PWM supports from stop to full speed
    min_power: 0
    max_power: 1
    id: fan_pwm

# Just make sure the Climate device is set to off or it will keep getting overridden.
fan:
  - platform: speed
    name: Fans
    id: fans
    output: fan_pwm

# Expose a PID-controlled Thermostat
# Manual: https://esphome.io/components/climate/pid.html
climate:
  - platform: pid
    name: "Rack Thermostat"
    id: thermostat
    sensor: temperature
    default_target_temperature: 20°C
    cool_output: fan_pwm
    visual:
      min_temperature: 15
      max_temperature: 50
      temperature_step: 1
    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0
      max_integral: 0.0
      output_averaging_samples: 5
      derivative_averaging_samples: 5

    # How to behave when close to the target temperature?
    deadband_parameters:
      threshold_high: +1°C
      threshold_low: -1°C
      kp_multiplier: 0.0
      ki_multiplier: 0.05
      kd_multiplier: 0.0
      deadband_output_averaging_samples: 15

# This action starts the autotune process of the PID controller.
# See more at: https://esphome.io/components/climate/pid.html#climate-pid-autotune-action
button:
  - platform: template
    name: "PID Climate Autotune"
    on_press:
      - climate.pid.autotune: thermostat
