wireguard:

  image:
    repository: ghcr.io/bryopsida/wireguard
    tag: main
    pullPolicy: Always

  keygenJob:
    image:
      repository: ghcr.io/curium-rocks/wg-kubectl
      tag: latest
      pullPolicy: Always
    podSecurityContext:
      seccompProfile:
        type: RuntimeDefault
      fsGroup: 1000
      fsGroupChangePolicy: Always
    containerSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
  podAnnotations: {}
  labels: {}
  # -- Run pod on host network
  runPodOnHostNetwork: false
  # -- Expose VPN service on hostPort
  useHostPort: false
  # -- Host port to expose the VPN service on
  hostPort: 51820
  wireguard:
    # -- Address of the VPN server
    serverAddress: 10.34.0.1/24
    # -- Subnet for your VPN, take care not to clash with cluster POD cidr
    serverCidr: 10.34.0.0/24
    # -- Add the serverCidr to the nat source net option
    natAddSourceNet: true
    # -- A collection of clients that will be added to wg0.conf, accepts objects with keys PublicKey and AllowedIPs (mandatory) and optional FriendlyName or FriendlyJson (https://github.com/MindFlavor/prometheus_wireguard_exporter#friendly-tags) and PersistentKeepalive (https://www.wireguard.com/quickstart/#nat-and-firewall-traversal-persistence), stored in secret
    clients:
       - FriendlyName: username1
         ## FriendlyJson will override FriendlyName
         # FriendlyJson:
         #   username: "username1"
         AllowedIPs: 10.34.0.101/32
         PublicKey: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCtn/xhkTMFrsjNzFuMmIIAc6vSRL1hSrjeZw1Vo72D27ViO9KqZDtSaBJPURXuu9BM106fvdzkdFq4m3Kzf/YPcy4iadbikmyO7x2PvgRSQH5cM6M7KseKCah2QpDfCkNwkPJz7eWIxzM2CrgT52OK01bjRDdccxDnc73YqZLx/wIDAQAB
         # Normally PersistentKeepalive is not required
         #PersistentKeepalive: 25
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: true
    privileged: false
  service:
    # -- Whether the service will be created or not
    enabled: true
    # -- Service type, to keep internal to cluster use ClusterIP or NodePort
    type: LoadBalancer
    # -- Service port, default is 51820 UDP
    port: 51820
    # -- Node port, only valid with service type: NodePort
    nodePort: 31820
    # -- External Traffic Policy for the service
    externalTrafficPolicy: ""
    # -- IP to assign to the LoadBalancer service
    loadBalancerIP: ""
    # -- Annotations
    annotations: 
      metallb.universe.tf/loadBalancerIPs: "192.168.1.236"
      external-dns.alpha.kubernetes.io/enabled: "true"
    # -- Extra ports that can be attached to the service object, these are passed directly to the port array on the service and must be well formed to the specification
    extraPorts: []
  # -- Name of a secret with a wireguard private key on key privatekey, if not provided on first install a hook generates one.
  secretName: ~
  replicaCount: 1
  resources:
    requests:
      memory: 256Mi
      cpu: "100m"
    limits:
      memory: 256Mi
      cpu: "100m"

  disruptionBudget:
    enabled: false
  autoscaling:
    enabled: false
  configSecretName: ~
  # -- The property/key on the secret holding the wireguard configuration file
  configSecretProperty: wg0.conf
  # -- Disable creation and any mounting of a private key, this assumes another mechanism is provided/used at the container level to fetch the private key
  disablePrivateKeyManagement: false
  # -- Disable creation and any mount of the wireguard confifugration file, this assumes another mechanism is provided/used to manage a configuration file
  disableConfigManagement: false
  # -- Passthrough pod volumes
  volumes: {}
  # -- Passthrough pod volume mounts
  volumeMounts: {}
  # -- Set pod affinity or antiAffinity

  ## Health sidecar configuration
  healthSideCar:
    # -- Opt in side car to expose a http health end point for external load balancers that are not kubernetes aware, in most cases this is not needed
    enabled: false
    # -- Secure settings by default, can be overriden to reduce security posture if needed
    securityContext:
      capabilities:
        drop:
          - ALL
      runAsGroup: 10001
      runAsUser: 10001
      seccompProfile:
        type: RuntimeDefault
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
    # -- set resource constraints, set to nil to remove
    resources:
      requests:
        memory: 256Mi
        cpu: "100m"
      limits:
        memory: 256Mi
        cpu: "100m"
    image:
      # -- Override repo if you prefer to use your own image
      repository: ghcr.io/bryopsida/http-healthcheck-sidecar
      # -- Rolling tag used by default to take patches automatically
      tag: main
      # -- Pull Policy always to avoid cached rolling tags, if you change this you should use a non rolling tag
      pullPolicy: Always
    service:
      # -- Override service port if needed
      port: 3000
      # -- Toggle to enable the service, if the pod is a daemonset healthSideCar.useHostPort can be used instead
      enabled: true
      # -- Service type, given the use case, in most cases this should be NodePort
      type: NodePort
      # -- The port for the service exposed on each node
      nodePort: 31313
    # -- When enabled the container will define a host port, in most cases this should only be used when deploying with daemonSet: true
    useHostPort: false
    # -- When useHostPort is true this is the host port defined
    hostPort: 13000
    
