app-template:
  controllers:
    radarr:
      labels:
        backup/retain: quaterly
      type: statefulset
      containers:
        radarr:
          image:
            repository: ghcr.io/home-operations/radarr
            tag: 6.0.1.10258@sha256:b67ac38b70e9f0d2aee0be31be27fd25d9d35ed1f7204d012fd05effabc395f5

          env:
            TZ: Europe/Madrid

          resources:
            requests:
              cpu: 10m
              memory: 512Mi
            limits:
              memory: 750Mi
          probes:
            liveness:
              enabled: true
            readiness:
              enabled: true
            startup:
              enabled: true
              spec:
                failureThreshold: 30
                periodSeconds: 5
        metrics:
          image:
            repository: ghcr.io/onedr0p/exportarr
            tag: v2.3.0@sha256:af535d94061cf97a52e1661945ffba78c03f9443eae7c0da1a80a5a4be56b520
          args:
            - radarr
            - --enable-additional-metrics
            - --enable-unknown-queue-items
          env:
            PORT: &metrics_port 9707
            URL: http://radarr:7878
          envFrom:
            - secretRef:
                name: radarr-secrets
          resources:
            requests:
              cpu: 5m
              memory: 36Mi
            limits:
              memory: 128Mi

          ports:
            - name: metrics
              containerPort: *metrics_port
              protocol: TCP

          probes:
            liveness: &metrics_probe
              enabled: true
              custom: true
              spec:
                failureThreshold: 3
                periodSeconds: 30
                tcpSocket:
                  port: *metrics_port
                timeoutSeconds: 1
            readiness: *metrics_probe

  service:
    radarr:
      controller: radarr
      ports:
        http:
          port: 7878

  serviceMonitor:
    radarr:
      enabled: true
      serviceName: radarr
      labels:
        release: monitoring
      endpoints:
        - port: metrics
          scheme: http
          path: /metrics
          interval: 1m
          scrapeTimeout: 30s

  ingress:
    radarr:
      enabled: true
      className: nginx-internal
      annotations:
        external-dns.alpha.kubernetes.io/enabled: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod-dns
      hosts:
      - host: &host radarr.internal.dbcloud.org
        paths:
        - path: /
          pathType: Prefix
          service:
            identifier: radarr
            port: http
      tls:
      - hosts:
        - *host
        secretName: radarr-tls-certificate

    external:
      enabled: true
      className: nginx-external
      annotations:
        external-dns.alpha.kubernetes.io/enabled: "true"
        external-dns.alpha.kubernetes.io/target: dbcloud.org
        cert-manager.io/cluster-issuer: letsencrypt-prod-dns
        nginx.ingress.kubernetes.io/auth-url: https://auth.dbcloud.org/oauth2/auth?allowed_groups=radarrUsers
        nginx.ingress.kubernetes.io/auth-signin: https://auth.dbcloud.org/oauth2/start
        nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
      hosts:
      - host: &host radarr.dbcloud.org
        paths:
        - path: /
          pathType: Prefix
          service:
            identifier: radarr
            port: http
      tls:
      - hosts:
        - *host
        secretName: radarr-external-tls-certificate

  defaultPodOptions:
    securityContext:
      runAsUser: 995
      runAsGroup: 991
      fsGroup: 991
      fsGroupChangePolicy: "OnRootMismatch"

  persistence:
    config:
      enabled: true
      globalMounts:
      - path: /config
      existingClaim: config-radarr
    peliculas:
      enabled: true
      type: hostPath
      hostPath: /datasets/peliculas
      globalMounts:
      - path: /datasets/peliculas
