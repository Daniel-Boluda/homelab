argo-cd:
  server:
    extraArgs:
      - --insecure
    config:
      statusbadge.enabled: 'true'
      # The health assessement of argoproj.io/Application CRD has been removed in argocd 1.8
      # (see https://github.com/argoproj/argo-cd/issues/3781 for more information)
      # You might need to restore it if you are using app-of-apps pattern and orchestrating
      # syncronization using sync waves. Add the following resource customization in argocd-cm:
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs
    ingress:
      enabled: true
      ingressClassName: nginx-internal
      annotations:
        cert-manager.io/cluster-issuer: internal
        hajimari.io/appName: ArgoCD
        hajimari.io/icon: robot
      hosts:
        - &host argocd.k8s.grigri
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics: &metrics
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: false
  controller:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

    metrics: *metrics

  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 10m
        memory: 64Mi

    metrics: *metrics

  redis:
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi

    metrics:
      enabled: false

  applicationSet:
    enabled: true

    # non ARM image
    nodeSelector:
      kubernetes.io/arch: amd64
    #image:
    #  # -- Repository to use for the application set controller
    #  # @default -- `""` (defaults to global.image.repository)
    #  repository: ""
    #  # -- Tag to use for the application set controller
    #  # @default -- `""` (defaults to global.image.tag)
    #  tag: ""
    #  # -- Image pull policy for the application set controller
    #  # @default -- `""` (defaults to global.image.imagePullPolicy)
    #  imagePullPolicy: ""

    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

