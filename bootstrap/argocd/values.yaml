argo-cd:
  server:
    extraArgs:
      - --insecure
    config:
      url: https://argocd.k8s.grigri

      dex.config: |
        # Uncomment this block to enable configuration for the expiration time durations.
        # expiry:
        #   signingKeys: "6h"
        #   idTokens: "24h"

        # Options for controlling the logger.
        logger:
          level: "info"
          format: "text" # can also be "json"

        # Uncomment this block to control which response types dex supports. For example
        # the following response types enable the implicit flow for web-only clients.
        # Defaults to ["code"], the code flow.
        # oauth2:
        #   responseTypes: ["code", "token", "id_token"]

        # Instead of reading from an external storage, use this list of clients.
        #
        # If this option isn't chosen clients may be added through the gRPC API.
        staticClients:
          - id: grafana-sso
            name: Grafana
            redirectURIs:
              - 'https://grafana.k8s.grigri/login/generic_oauth'
            secretEnv: GRAFANA_SSO_CLIENT_SECRET

        #   - id: oauth2-proxy
        #     redirectURIs:
        #     - 'https://beets.grigri.cloud/oauth2/callback'
        #     - 'https://netdata.grigri.cloud/oauth2/callback'
        #     - 'https://sonarr.grigri.cloud/oauth2/callback'
        #     - 'https://couchpotato.grigri.cloud/oauth2/callback'
        #     - 'https://freshrss.grigri.cloud/oauth2/callback'
        #     - 'https://bazarr.grigri.cloud/oauth2/callback'
        #     - 'https://radarr.grigri.cloud/oauth2/callback'
        #     - 'https://jackett.grigri.cloud/oauth2/callback'
        #     - 'https://music.grigri.cloud/oauth2/callback'
        #     name: 'oauth2-proxy'
        #     secret: XXXXX

        connectors:
        - type: ldap
          # Required field for connector id.
          id: ldap
          # Required field for connector name.
          name: LDAP.GRIGRI
          config:
            # Host and optional port of the LDAP server in the form "host:port".
            # If the port is not supplied, it will be guessed based on "insecureNoSSL",
            # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
            # otherwise.
            host: ldap.grigri:389

            # Following field is required if the LDAP host is not using TLS (port 389).
            # Because this option inherently leaks passwords to anyone on the same network
            # as dex, THIS OPTION MAY BE REMOVED WITHOUT WARNING IN A FUTURE RELEASE.
            #
            # insecureNoSSL: true

            # If a custom certificate isn't provide, this option can be used to turn on
            # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
            # of explorative phases.
            #
            # insecureSkipVerify: true

            # When connecting to the server, connect using the ldap:// protocol then issue
            # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
            #
            startTLS: true

            # Path to a trusted root certificate file. Default: use the host's root CA.
            #rootCA: /etc/dex/ldap.ca

            # A raw certificate file can also be provided inline.
            # rootCAData: ( base64 encoded PEM file )

            # The DN and password for an application service account. The connector uses
            # these credentials to search for users and groups. Not required if the LDAP
            # server provides access for anonymous auth.
            # Please note that if the bind password contains a `$`, it has to be saved in an
            # environment variable which should be given as the value to `bindPW`.
            bindDN: "$LDAP_BINDDN"
            bindPW: "$LDAP_BINDPW"

            # The attribute to display in the provided password prompt. If unset, will
            # display "Username"
            usernamePrompt: Username

            # User search maps a username and password entered by a user to a LDAP entry.
            userSearch:
              # BaseDN to start the search from. It will translate to the query
              # "(&(objectClass=person)(uid=<username>))".
              baseDN: "ou=People,dc=grigri,dc=cloud"
              # Optional filter to apply when searching the directory.
              #filter: "(objectClass=inetOrgPerson)"
              # only allow wheel users
              #filter: "(&(objectClass=inetOrgPerson)(memberOf=cn=wheel,ou=Groups,dc=grigri,dc=cloud))"

              # username attribute used for comparing user entries. This will be translated
              # and combined with the other filter as "(<attr>=<username>)".
              username: uid
              # The following three fields are direct mappings of attributes on the user entry.
              # String representation of the user.
              idAttr: uid
              # Required. Attribute to map to Email.
              emailAttr: mail
              # Maps to display name of users. No default value.
              nameAttr: cn
              preferredUsernameAttr: cn

            # Group search queries for groups given a user entry.
            groupSearch:
              # The directory directly above the group entry.
              baseDN: "ou=Groups,dc=grigri,dc=cloud"
              # Optional filter to apply when searching the directory.
              filter: "(objectClass=posixGroup)"

              userMatchers:
              - userAttr: memberOf
                # dn cannot be used as LDAP attribute, we have RFC2307bis schema and this is
                # not working.
                # fixed in: https://github.com/dexidp/dex/pull/1202
                groupAttr: dn
              nameAttr: cn

      statusbadge.enabled: 'true'
      # The health assessement of argoproj.io/Application CRD has been removed in argocd 1.8
      # (see https://github.com/argoproj/argo-cd/issues/3781 for more information)
      # You might need to restore it if you are using app-of-apps pattern and orchestrating
      # syncronization using sync waves. Add the following resource customization in argocd-cm:
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs

    rbacConfig:
      # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).
      # Policy rules are in the form:
      #   p, subject, resource, action, object, effect
      # Role definitions and bindings are in the form:
      #   g, subject, inherited-subject
      # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.
      policy.csv: |
          # Grant all members of each LDAP group
          p, role:none, *, *, */*, deny
          g, wheel, role:admin

      scopes: '[groups]'

    ingress:
      enabled: true
      ingressClassName: nginx-internal
      annotations:
        cert-manager.io/cluster-issuer: internal
        hajimari.io/appName: ArgoCD
        hajimari.io/icon: robot
      hosts:
        - &host argocd.k8s.grigri
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics: &metrics
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: true

    metrics: *metrics

    env:
      - name: LDAP_BINDDN
        valueFrom:
          secretKeyRef:
            name: dex-ldap-user
            key: dn
      - name: LDAP_BINDPW
        valueFrom:
          secretKeyRef:
            name: dex-ldap-user
            key: password
    envFrom:
      - secretRef:
          name: grafana-secret
    volumeMounts:
      - name: ca-bundle
        mountPath: /etc/ssl/certs/ca-certificates.crt
        readOnly: true
    volumes:
      - name: ca-bundle
        hostPath:
          path: /etc/ssl/certs/ca-certificates.crt
          type: File
    resources:
      limits:
        cpu: 50m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi

  controller:
    resources:
      requests:
        cpu: 250m
        memory: 256Mi
      limits:
        cpu: 2
        memory: 512Mi

    metrics: *metrics

  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    resources:
      limits:
        cpu: 1
        memory: 256Mi
      requests:
        cpu: 10m
        memory: 64Mi

    metrics: *metrics

  redis:
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 64Mi

    metrics:
      enabled: false

  applicationSet:
    enabled: true

    # non ARM image
    nodeSelector:
      kubernetes.io/arch: amd64
    #image:
    #  # -- Repository to use for the application set controller
    #  # @default -- `""` (defaults to global.image.repository)
    #  repository: ""
    #  # -- Tag to use for the application set controller
    #  # @default -- `""` (defaults to global.image.tag)
    #  tag: ""
    #  # -- Image pull policy for the application set controller
    #  # @default -- `""` (defaults to global.image.imagePullPolicy)
    #  imagePullPolicy: ""

    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
