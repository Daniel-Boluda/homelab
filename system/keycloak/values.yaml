logging:
  level: INFO
  output: json
production: true

extraEnvVars:
- name: KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_SUCCESS_LEVEL
  value: info
- name: KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_ERROR_LEVEL
  value: warn
- name: KC_SPI_CONTENT_SECURITY_POLICY_RESPONSE_HEADER
  value: "frame-src 'self' https:; frame-ancestors 'self' https:; object-src 'none';"
- name: KC_HTTP_MANAGEMENT_PORT
  value: "9000"
# Since 25.0.0 they run on port 9000
- name: KC_HEALTH_ENABLED
  value: "true"
- name: KC_METRICS_ENABLED
  value: "true"
- name: KC_HOSTNAME_STRICT_HTTPS
  value: "true"
- name: KC_HOSTNAME
  value: "keycloak.dbcloud.org"
- name: KC_HOSTNAME_STRICT
  value: "true"
- name: KC_HTTP_RELATIVE_PATH
  value: "/"
- name: KC_PROXY
  value: "edge"
- name: KC_HOSTNAME_URL
  value: "https://keycloak.dbcloud.org"

auth:
  createAdminUser: true
  adminUser: daniel.boluda.fdez@gmail.com
  existingSecret: keycloak-secrets
  passwordSecretKey: KEYCLOAK_PASSWORD

tls:
  # Use TLS in backend
  enabled: true
  # Existing secret generated by cert-manager with TLS certificates per Keycloak replica
  existingSecret: keycloak.dbcloud.org-tls
  # Use PEM certificates (generated by cert-manager) as input instead of PKS12/JKS stores
  usePem: true
# https://www.keycloak.org/server/reverseproxy
# we want traffic from Ingress to backend to be with SSL termination
# proxy: reencrypt

extraContainerPorts:
- name: admin
  containerPort: 9000
  protocol: TCP

extraVolumes:
- name: shared
  emptyDir: {}

extraVolumeMounts:
- mountPath: /shared
  name: shared

replicaCount: 1
resources:
  requests:
    memory: "512Mi"
    cpu: "100m"
  limits:
    memory: "1024Mi"
    cpu: "1000m"
postgresql:
  enabled: false
externalDatabase:
  host: keycloak-postgres
  database: keycloak
  #to verify if it exists a existingsecretUsernameKey
  user: keycloak
  existingSecret: keycloak.keycloak-postgres.credentials.postgresql.acid.zalan.do
  existingSecretPasswordKey: password
# keycloak distributed cache for kubernetes.
cache:
  enabled: true
service:
  type: ClusterIP
  # health endpoint in the admin port
  extraPorts:
  - name: admin
    port: 9000
    targetPort: admin

ingress:
  enabled: true
  ingressClassName: nginx-external
  hostname: keycloak.dbcloud.org
  annotations:
    #nginx.ingress.kubernetes.io/auth-url: https://kubeadmin.auth.dbcloud.org/oauth2/auth
    #nginx.ingress.kubernetes.io/auth-signin: https://kubeadmin.auth.dbcloud.org/oauth2/start
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    external-dns.alpha.kubernetes.io/enabled: "true"
    external-dns.alpha.kubernetes.io/target: dbcloud.org
    cert-manager.io/cluster-issuer: letsencrypt-prod-dns
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
  tls: true

networkPolicy:
  enabled: true
  extraIngress:
  - ports:
    - port: 9000

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    port: admin
    labels:
      release: monitoring

  prometheusRule:
    enabled: false
