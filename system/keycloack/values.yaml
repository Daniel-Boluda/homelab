logging:
  level: INFO
  output: json
production: true

extraEnvVars:
  - name: KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_SUCCESS_LEVEL
    value: info
  - name: KC_SPI_EVENTS_LISTENER_JBOSS_LOGGING_ERROR_LEVEL
    value: warn
  - name: KC_HTTP_MANAGEMENT_PORT
    value: "9000"
  # Since 25.0.0 they run on port 9000
  - name: KC_HEALTH_ENABLED
    value: "true"
  - name: KC_METRICS_ENABLED
    value: "true"

auth:
  adminUser: admin
  existingSecret: keycloak-secrets
  passwordSecretKey: KEYCLOAK_PASSWORD

tls:
  # Use TLS in backend
  enabled: true
  # Existing secret generated by cert-manager with TLS certificates per Keycloak replica
  existingSecret: keycloak-tls-certificate
  # Use PEM certificates (generated by cert-manager) as input instead of PKS12/JKS stores
  usePem: true
# https://www.keycloak.org/server/reverseproxy
# we want traffic from Ingress to backend to be with SSL termination
# proxy: reencrypt

extraContainerPorts:
  - name: admin
    containerPort: 9000
    protocol: TCP

extraVolumes:
  - name: shared
    emptyDir: {}

extraVolumeMounts:
  - mountPath: /shared
    name: shared

replicaCount: 1
resources:
  requests:
    memory: "512Mi"
    cpu: "100m"
  limits:
    memory: "1024Mi"
    cpu: "1000m"
postgresql:
  enabled: false
externalDatabase:
  host: keycloak-postgres
  database: keycloak
  #to verify if it exists a existingsecretUsernameKey
  user: keycloak
  existingSecret: keycloak.keycloak-postgres.credentials.postgresql.acid.zalan.do
  existingSecretPasswordKey: password
# keycloak distributed cache for kubernetes.
cache:
  enabled: true
service:
  type: ClusterIP
  # health endpoint in the admin port
  extraPorts:
    - name: admin
      port: 9000
      targetPort: admin

ingress:
  enabled: true
  ingressClassName: nginx-internal
  hostname: keycloak.internal.dbcloud.org
  # because we're using proxy: reencrypt, we need to set the backend protocol to HTTPS
  servicePort: https
  annotations:
    nginx.ingress.kubernetes.io/auth-url: https://kubeadmin.auth.dbcloud.org/oauth2/auth
    nginx.ingress.kubernetes.io/auth-signin: https://kubeadmin.auth.dbcloud.org/oauth2/start
    external-dns.alpha.kubernetes.io/enabled: "true"
    external-dns.alpha.kubernetes.io/target: dbcloud.org
    cert-manager.io/cluster-issuer: letsencrypt-prod-dns
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
  tls: true

networkPolicy:
  enabled: true
  extraIngress:
    - ports:
        - port: 9000

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1

metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    port: admin
    labels:
      release: monitoring

  prometheusRule:
    enabled: true
    labels:
      release: monitoring
    groups:
      - name: Keycloak
        rules:
          - alert: KeycloakInstanceNotAvailable
            annotations:
              message: |
                Keycloak instance in namespace {{ include "common.names.namespace" . }} has not been available for the last 5 minutes.
            expr: |
              absent(kube_pod_status_ready{namespace="{{ include "common.names.namespace" . }}", condition="true"} * on (pod) kube_pod_labels{pod=~"{{ include "common.names.fullname" . }}-\\d+", namespace="{{ include "common.names.namespace" . }}"}) != 0
            for: 5m
            labels:
              severity: critical
